/*+
 * Copyright 2017 Two Pore Guys, Inc.
 * All rights reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted providing that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

#import <Foundation/Foundation.h>

@class RPCObject;
@class RPCCall;
@class RPCInstance;
@class RPCInterface;

/**
  * Enumeration of possible RPC object types.
  */
typedef NS_ENUM(NSInteger, RPCType) {
    RPCTypeNull,            /**< Null value (a singleton) */
    RPCTypeBoolean,         /**< Boolean value (true or false */
    RPCTypeUInt64,          /**< 64-bit unsigned integer */
    RPCTypeInt64,           /**< 64-bit signed integer */
    RPCTypeDouble,          /**< Double precision floating point number */
    RPCTypeString,          /**< Character sequence */
    RPCTypeBinary,          /**< Binary data buffer */
    RPCTypeFD,              /**< File descriptor */
    RPCTypeDictionary,      /**< Dictionary of values, with string keys */
    RPCTypeArray,           /**< Array of values */
    RPCTypeError            /**< Error object */
};

typedef void (^RPCFunctionCallback)(RPCCall * _Nonnull call, RPCObject * _Nonnull value);
typedef void (^RPCPropertyCallback)(RPCObject *_Nonnull value);
typedef void (^RPCEventCallback)(RPCObject* _Nonnull value, NSString * _Nonnull path,
                                 NSString * _Nonnull interface, NSString * _Nonnull method);

/**
 * A boxed type representing librpc value.
 */
@interface RPCObject : NSObject
/**
 * Creates a new RPCObject from NSObject-based value.
 *
 * @param value Value
 * @return Boxed RPCObject
 */
- (nonnull instancetype)initWithValue:(nullable id)value;

/**
 * Creates a new RPCObject from NSObject-based value with specific type.
 *
 * This function allows to override default type guess for the newly
 * created RPCObject. Useful when creating unsigned integer, floating point
 * or boolean values.
 *
 * @param value Value
 * @return Boxed RPCObject
 */
- (nonnull instancetype)initWithValue:(nullable id)value andType:(RPCType)type;

/**
 * Initializes a new RPCObject from a C-based @ref rpc_object_t handle.
 *
 * @param object And @ref rpc_object_t handle
 * @returns Boxed RPCObject
 */
- (nonnull instancetype)initFromNativeObject:(nullable void *)object;

/**
 * Returns object representing last error generated by librpc in the current thread.
 *
 * @return RPCObject with last error information or nil.
 */
+ (nullable instancetype)lastError;

/**
 * Returns string description of the contained value.
 *
 * @return RPCObject description
 */
- (nonnull NSString *)describe;

/**
 * Returns unboxed value of the object.
 *
 * @return Object value
 */
- (nullable id)value;

/**
 * Returns native librpc object pointer.
 *
 * @return Native librpc pointer (actual type is @p rpc_object_t)
 */
- (nonnull void *)nativeValue;

/**
 * Returns the type of the object.
 *
 * @return Object type
 */
- (RPCType)type;
@end

/**
 * A boxed type representing librpc 64-bit unsigned integer.
 */
@interface RPCUnsignedInt : RPCObject
/**
 * Initializes a new uint64 value.
 *
 * @param value Object value
 */
- (nonnull instancetype)init:(nonnull NSNumber *)value;
@end

/**
 * A boxed type representing librpc 64-bit bool.
 */
@interface RPCBool : RPCObject
/**
 * Initializes a new boolean value.
 *
 * @param value Object value (YES or NO)
 */
- (nonnull instancetype)init:(BOOL)value;
@end

/**
 * A boxed type representing librpc double precision floating point number.
 */
@interface RPCDouble : RPCObject
/**
 * Initializes a new double value.
 *
 * @param value Object value
 */
- (nonnull instancetype)init:(nonnull NSNumber *)value;
@end

/**
 * Represents a call submitted to the server.
 */
@interface RPCCall : NSObject <NSFastEnumeration>
/**
 * Wraps a native librpc call pointer into @ref RPCCall object.
 *
 * @param object librpc call pointer (actual type should be @p rpc_call_t)
 * @return self
 */
- (nonnull instancetype)initFromNativeObject:(nonnull void *)object;

/**
 * Waits for a call to deliver a result or an error.
 */
- (void)wait;

/**
 * Resumes a streaming call.
 *
 * This method sends a message to the server asking for next chunk
 * of a streaming call data. After calling it, one must call @ref wait
 * method to wait for a next chunk to be delivered.
 */
- (void)resume;

/**
 * Aborts a call that is in progress.
 */
- (void)abort;

/**
 * Sets prefetch size for a streaming call.
 *
 * @param len Number of items to prefetch.
 */
- (void)setPrefetch:(NSInteger)len;

/**
 * Returns the result of the call.
 *
 * In case of a streaming call, it returns last chunk of data
 * received from the server.
 */
- (nullable RPCObject *)result;

/**
 * Interfaces with NSFastEnumeration interface.
 *
 * This function shouldn't be called directly, it is used by the Objective C runtime
 * to allow using foreach loop on the call object.
 */
- (NSUInteger)countByEnumeratingWithState:(nonnull NSFastEnumerationState *)state
                                  objects:(id _Nullable __unsafe_unretained [_Nullable])buffer
                                    count:(NSUInteger)len;
@end

@interface RPCListenHandle : NSObject
- (void)cancel;
@end

@interface RPCClient : NSObject
/**
 * Connects to an endpoint specified by @p uri.
 *
 * @param uri URI of the endpoint to connect to
 */
- (BOOL)connect:(nonnull NSString *)uri
          error:(NSError * _Nullable *_Nullable)error;

/**
 * Terminates the current connection.
 *
 * If the instance is not connected, this call has no effect.
 */
- (void)disconnect;

/**
 * Returns a C pointer to @p rpc_client_t handle.
 *
 * @return Pointer to a @p rpc_client_t handle.
 */
- (void *)nativeValue;

/**
 * Returns a dictionary of instances found on the server.
 */
- (nonnull NSDictionary<NSString *, RPCInstance *> *)instances;

/**
 * Configures dispatch queue to be used by callbacks.
 *
 * Setting this to @p NULL switches back to internal librpc thread pool.
 *
 * @param queue Dispatch queue to use
 */
- (void)setDispatchQueue:(nullable dispatch_queue_t)queue;

- (nullable id)findInstance:(nonnull NSString *)name
               andInterface:(nonnull NSString *)interface;

/**
 * Issues a call to the server.
 */
- (nullable RPCCall *)call:(nonnull NSString *)method
                     path:(nullable NSString *)path
                interface:(nullable NSString *)interface
                     args:(nullable RPCObject *)args
                    error:(NSError *_Nullable *_Nullable)error;

/**
 * Issues a call to the server and waits for the response.
 */
- (nullable RPCObject *)callSync:(nonnull NSString *)method
                           path:(nullable NSString *)path
                      interface:(nullable NSString *)interface
                           args:(nullable RPCObject *)args
                          error:(NSError *_Nullable *_Nullable)error;

/**
 * Issues a call to the server and runs @p callback when
 * there's a response available.
 */
- (void)callAsync:(nonnull NSString *)method
             path:(nullable NSString *)path
        interface:(nullable NSString *)interface
             args:(nullable RPCObject *)args
         callback:(nonnull RPCFunctionCallback)cb;

/**
 * Sets up a callback to be fired whenever specified event occurs on
 * the server.
 *
 * @param event Event name
 * @param path Path of the instance to watch
 * @param interface Interface name containing the @p event
 */
- (nonnull RPCListenHandle *)eventObserver:(nonnull NSString *)event
                                      path:(nonnull NSString *)path
                                 interface:(nonnull NSString *)interface
                                  callback:(nullable RPCEventCallback)cb;

/**
 * Sets up a callback to be fired whenever property value changes.
 *
 * This is a helper function that uses @ref eventObserver API
 * to set up a callback specifically for interface property changes.
 *
 * @param name Property name
 * @param path Path of the instance to watch
 * @param interface Interface name containing the property
 */
- (nonnull RPCListenHandle *)observeProperty:(nonnull NSString *)name
                                        path:(nonnull NSString *)path
                                   interface:(nonnull NSString *)interface
                                    callback:(nullable RPCPropertyCallback)cb;

@end

/**
 * Represents a remote object instance.
 */
@interface RPCInstance : NSObject
/**
 * Pointer to the client handle.
 */
@property (readonly, nonnull) RPCClient *client;

/**
 * Path of the instance in the server's object tree.
 */
@property (readonly, nonnull) NSString *path;

/**
 * A dictionary containing interfaces implemented by the instance.
 */
@property (readonly, nonnull) NSDictionary<NSString *, RPCInterface *> *interfaces;

- (nonnull instancetype)initWithClient:(nonnull RPCClient *)client
                               andPath:(nonnull NSString *)path;
@end

/**
 * Represents an interface of a remote object instance.
 */
@interface RPCInterface : NSObject
/**
 * Pointer to the client handle.
 */
@property (readonly, nullable) RPCClient *client;

/**
 * Path of the instance in the server's object tree.
 */
@property (readonly, nullable) NSString *path;

/**
 * Name of the interface.
 */
@property (readonly, nullable) NSString *interface;
@property (readonly, nullable) NSArray<NSDictionary *> *properties;

/**
 * List of methods offered by the interface.
 */
@property (readonly, nullable) NSArray<NSString *> *methods;

/**
 * Watches for property value changes.
 *
 * This function fires the callback @p cb whenever property @p name
 * in the interface changes it's value.
 *
 * @param name Property name
 * @param cb Callback to call whenever property value changes
 */
- (nonnull RPCListenHandle *)observeProperty:(nonnull NSString *)name
                                    callback:(nonnull RPCPropertyCallback)cb;

/**
 * Issues a synchronous method call to the server.
 *
 * @param method Method name to call
 * @param error Pointer to store error object in case of failure
 */
- (nullable id)call:(nonnull NSString *)method
              error:(NSError *_Nullable *_Nullable)error;

/**
 * Issues a synchronous method call to the server.
 *
 * @param method Method name to call
 * @param args Method arguments list
 * @param error Pointer to store error object in case of failure
 */
- (nullable id)call:(nonnull NSString *)method
               args:(nullable NSObject *)args
              error:(NSError *_Nullable *_Nullable)error;

/**
 * Retrieves a property value.
 *
 * @param property Property name
 * @param error Pointer to store error object in case of failure
 */
- (nullable id)get:(nonnull NSString *)property
             error:(NSError *_Nullable *_Nullable)error;

/**
 * Sets a property value.
 *
 * @param property Property name
 * @param value Property value
 * @param error Pointer to store error object in case of failure
 */
- (nullable id)set:(nonnull NSString *)property
             value:(nullable NSObject *)value
             error:(NSError *_Nullable *_Nullable)error;

- (nonnull instancetype)initWithClient:(nonnull RPCClient *)client
                                  path:(nonnull NSString *)path
                          andInterface:(nonnull NSString *)interface;
@end

@interface RPCTyping : NSObject
+ (instancetype)shared;
- (BOOL)loadTypes:(nonnull NSString *)path error:(NSError *_Nullable *_Nullable)error;
- (BOOL)loadTypesDirectory:(nonnull NSString *)directory error:(NSError *_Nullable *_Nullable)error;
- (BOOL)loadTypesConnection:(nonnull RPCClient *)client error:(NSError *_Nullable *_Nullable)error;
@end
